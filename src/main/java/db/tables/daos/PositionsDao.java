/*
 * This file is generated by jOOQ.
 */
package db.tables.daos;


import db.tables.Positions;
import db.tables.records.PositionsRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PositionsDao extends DAOImpl<PositionsRecord, db.tables.pojos.Positions, Long> {

    /**
     * Create a new PositionsDao without any configuration
     */
    public PositionsDao() {
        super(Positions.POSITIONS, db.tables.pojos.Positions.class);
    }

    /**
     * Create a new PositionsDao with an attached configuration
     */
    public PositionsDao(Configuration configuration) {
        super(Positions.POSITIONS, db.tables.pojos.Positions.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(db.tables.pojos.Positions object) {
        return object.getNomenclatureId();
    }

    /**
     * Fetch records that have <code>nomenclature_id IN (values)</code>
     */
    public List<db.tables.pojos.Positions> fetchByNomenclatureId(Long... values) {
        return fetch(Positions.POSITIONS.NOMENCLATURE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>nomenclature_id = value</code>
     */
    public db.tables.pojos.Positions fetchOneByNomenclatureId(Long value) {
        return fetchOne(Positions.POSITIONS.NOMENCLATURE_ID, value);
    }

    /**
     * Fetch records that have <code>waybill_id IN (values)</code>
     */
    public List<db.tables.pojos.Positions> fetchByWaybillId(Long... values) {
        return fetch(Positions.POSITIONS.WAYBILL_ID, values);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<db.tables.pojos.Positions> fetchByPrice(Long... values) {
        return fetch(Positions.POSITIONS.PRICE, values);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<db.tables.pojos.Positions> fetchByAmount(Long... values) {
        return fetch(Positions.POSITIONS.AMOUNT, values);
    }
}
